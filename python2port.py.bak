#!/usr/bin/python

import socket
import time
import uuid
import csv
import io
import os
import subprocess
from subprocess import Popen, PIPE

# ip = "codeserverbwn.duckdns.org"
port = 4059
retry = 1
delay = 0.05
timeout = 1

data = list()
tailingFilename = str(uuid.uuid4())


def isOpen(ip, port):
    s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
    s.settimeout(timeout)
    try:
        s.connect((ip, int(port), 0, 0))
        s.shutdown(socket.SHUT_RDWR)
        return True
    except:
        return False
    finally:
        s.close()


# def checkHost(ip, port):
#    ipup = False
#    for i in range(retry):
#        if isOpen(ip, port):
#            ipup = True
#            break
#        else:
#            time.sleep(delay)
#    return ipup

pingcount=raw_input("ENTER PACKET COUNTS: ")
telnetretry = int(raw_input("ENTER TELNET RETRIES: "))

def pingSuccess(ip):
    hostname = ip
    # -i for duration, -c for packet count
    response = os.system("ping6 -W 1 -c "+ pingcount+" "+ hostname)
    print "\n"
    if response == 0:

        return 0
    else:
        return -1


def checkHost(ip, port):
    lst = list()
    ipup = False
    ping = True

    if pingSuccess(ip) == 0:
        for i in range(retry):
            print('success')
            for x in range(1, telnetretry+1 ):
                telnetStatus = isOpen(ip, port)
		if x != 1:
                    print "[ ! WARN !   Retrying telnet (", x, ")...  ]"
                if telnetStatus == True:
                    ipup = True
                    break
                else:
                    time.sleep(delay)
            """ if isOpen(ip, port):
                ipup = True
                break
            else:
                time.sleep(delay) """
    else:
        ping = ipup = False
    if ping == True:
        lst.append("PING SUCCESS")
    else:
        lst.append("PING FAIL")
    if ipup == True:
        lst.append("PORT OPEN")
    else:
        lst.append("PORT CLOSED")
    """ lst.append(ping)
    lst.append(ipup) """
    return lst


def readFromCSV(filename):
    with io.open(filename+'.csv', newline='') as f:
        reader = csv.reader(f)
        data.append(list(reader))
    f.close()


def preprocess(s):
    return bytes(s)

# BELOW TWO FUNCTIONS CONVERT THE OUTPUT TXT TO CSV


def getFileData():
    with io.open("Results_"+tailingFilename+".txt", 'r', newline='') as flhndl:
        return flhndl.readlines()


def extractToCSV(listData):
    header = ['HOST IP', 'PING STATUS', 'TELNET STATUS']
    with io.open("ResultsCSV_"+tailingFilename+".csv", 'wb') as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(header)
        for lines in listData:
            temp = str(lines[0:len(lines) - 1])
            first = temp.split('\t')
            print first

            wr.writerow(first)


filename = raw_input(
    "ENTER THE FILE NAME WITHOUT THE EXTENSION (DEFAULT FORMAT CSV):  ")
print(filename)
readFromCSV(filename)
with io.open("Results_"+tailingFilename+".txt", 'w', newline='') as file:
    for ips in data:
        for index, ips_get in enumerate(ips):
	    print("[ RUN {} ]".format(index+1))
            get_lst = list()
            get_lst = checkHost(ips_get[0], port)
            file.write(
                unicode(ips_get[0]+"\t"+str(get_lst[0])+"\t"+str(get_lst[1])+"\n"))

            # if checkHost(ips_get[0], port):
            #   print("{} : {} is UP\n\n".format(unicode(ips_get[0]), unicode(port)))
            #  file.write(unicode(ips_get[0]+"\tYES\tUP\n"))
            # else:
            #   print("{} : {} is DOWN\n\n".format(unicode(ips_get[0]), unicode(port)))
            #   file.write(unicode(ips_get[0]+"\tNO\tDOWN\n"))


data = getFileData()
extractToCSV(data)
